import logging
import os
import json
import threading
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from astro_calc import process_user_data
from ai_interpreter import generate_transit_message
from server import app  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def run():
    app.run(host="0.0.0.0", port=8080)

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run).start()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Ç—Ä–æ–±–æ—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<b>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <i>15.08.1990 14:30 –ñ–µ–Ω–µ–≤–∞</i>",
        parse_mode="HTML"
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        text = update.message.text
        user_id = update.message.from_user.id

        # üëá –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –≥–æ—Ä–æ–¥
        date_str, time_str, city = text.split(" ", 2)

        # üëá –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—è—Ç—å—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        username = update.message.from_user.username or update.message.from_user.full_name
        chart_path = process_user_data(
            telegram_id=user_id,
            username=username,
            date_str=date_str,
            time_str=time_str,
            city=city
        )

        await update.message.reply_text("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")

        keyboard = [[InlineKeyboardButton("üîÆ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=reply_markup)

    except ValueError as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã –≤–≤—ë–ª –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –ì–æ—Ä–æ–¥")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        

async def handle_transit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    chat_id = update.effective_chat.id
    chart_path = f"data/astro_user_{user_id}.json"

    try:
        # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        await query.message.reply_text("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è –≥–æ—Ç–æ–≤–ª—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã...")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        await context.bot.send_chat_action(chat_id=chat_id, action="typing") 

        with open(chart_path, "r", encoding="utf-8") as f:
            chart = json.load(f)

        saturn = chart["planets"]["–°–∞—Ç—É—Ä–Ω"]
        mars = chart["planets"]["–ú–∞—Ä—Å"]
        jupiter = chart["planets"]["–Æ–ø–∏—Ç–µ—Ä"]
        aspects = chart["aspects"]

        logger.info(f"üìå –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: –°–∞—Ç—É—Ä–Ω={saturn}, –ú–∞—Ä—Å={mars}, –Æ–ø–∏—Ç–µ—Ä={jupiter}, –ê—Å–ø–µ–∫—Ç—ã={len(aspects)} —à—Ç.")

        message = generate_transit_message(
        neptune=chart["planets"]["–ù–µ–ø—Ç—É–Ω"],
        saturn=saturn,
        mars=mars,
        jupiter=jupiter,
        aspects=aspects
        )
        await context.bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
        await context.bot.send_message(
            chat_id=chat_id,
            text=(
                "‚ùì <b>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?</b>\n"
                "üîπ –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª: <a href='https://t.me/lifeinastro'>@lifeinastro</a>\n"
                "ü§ñ –ò–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É –ø–æ–º–æ—â–Ω–∏–∫—É: <a href='https://t.me/lifeinastro_bot'>@lifeinastro_bot</a>"
            ),
            parse_mode="HTML",
            disable_web_page_preview=True
        )


    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞: %s", e)
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∏—Ç–∞: {e}")


def main() -> None:
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_transit))

    app.run_polling()


if __name__ == "__main__":
    main()
